{"version":3,"sources":["context.js","components/FilterService.js","Provider.js","components/TextInput.js","components/ValuesInput.js","components/Table.js","components/FiltersActive.js","App.js","serviceWorker.js","index.js"],"names":["storeContext","createContext","filterByName","data","nameFilter","filter","planet","name","includes","filterByValues","column","comparison","value","Number","findComparisons","Provider","children","useState","numericValues","filters","valuesFilter","setValuesFilter","setNameFilter","isFetching","sucess","initialData","setInitialData","filteredData","setFilteredData","useEffect","filtersActive","length","reduce","acc","index","finalData","results","context","starWarsAPI","fetch","then","json","response","catch","error","alert","TextInput","useContext","type","onChange","e","target","placeholder","data-testid","completeColumns","generateColumnOptions","arrayOfUsedColumns","map","colum","arrayOfColumns","each","key","generateValuesInput","state","htmlFor","setColumn","id","setComparison","setValue","onClick","newFilters","updateStore","ValuesInput","generateTable","tags","Object","entries","tag","arrayOfTags","diameter","generateTableBody","Table","FiltersActive","removeFilter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c0d2437.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst storeContext = createContext();\n\nexport default storeContext;\n","function findComparisons(data, filter) {\n  const { column, comparison, value } = filter;\n  switch (comparison) {\n    case 'bigger than':\n      return data.filter(\n        (planet) => planet[column] > Number(value) && planet[column] !== 'unknown',\n      );\n    case 'less than':\n      return data.filter(\n        (planet) => planet[column] < Number(value) && planet[column] !== 'unknown',\n      );\n    case 'equal to':\n      return data.filter((planet) => planet[column] === value && planet[column] !== 'unknown');\n    default:\n      return false;\n  }\n}\n\nfunction filterByName(data, nameFilter) {\n  if (nameFilter) {\n    return data.filter((planet) => planet.name.includes(nameFilter));\n  }\n  return data;\n}\n\nfunction filterByValues(data, filter, nameFilter) {\n  if (filter) {\n    const result = findComparisons(data, filter);\n    return filterByName(result, nameFilter);\n  }\n  return filterByName(data, nameFilter);\n}\n\nexport default function finalData(data, filtersActive, nameFilter) {\n  if (filtersActive.length > 0) {\n    return filtersActive.reduce((acc, filter, index) => {\n      const array = index === 0 ? data : acc;\n      return filterByValues(array, filter, nameFilter);\n    }, []);\n  }\n  return filterByName(data, nameFilter);\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport storeContext from './context';\nimport finalData from './components/FilterService';\n\nfunction Provider({ children }) {\n  const initialValue = {\n    data: [],\n    isFetching: true,\n    sucess: false,\n  };\n\n  const [valuesFilter, setValuesFilter] = useState({ numericValues: {}, filters: [] });\n  const [nameFilter, setNameFilter] = useState('');\n  const [initialData, setInitialData] = useState(initialValue);\n  const [filteredData, setFilteredData] = useState();\n\n  function starWarsAPI() {\n    fetch('https://swapi.co/api/planets/')\n      .then((data) => data.json())\n      .then((response) => setInitialData({ data: response, isFetching: false, sucess: true }))\n      .catch((error) => alert(error));\n  }\n\n  useEffect(() => {\n    setFilteredData(finalData(initialData.data.results, valuesFilter.filters, nameFilter));\n  }, [nameFilter, valuesFilter]);\n\n  const context = {\n    initialData,\n    starWarsAPI,\n    nameFilter,\n    setNameFilter,\n    valuesFilter,\n    setValuesFilter,\n    filteredData,\n  };\n  return <storeContext.Provider value={context}>{children}</storeContext.Provider>;\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n","import React, { useContext } from 'react';\nimport storeContext from '../context';\n\nfunction TextInput() {\n  const { setNameFilter } = useContext(storeContext);\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={(e) => setNameFilter(e.target.value)}\n        placeholder=\"Nome\"\n        data-testid=\"nameInput\"\n      />\n    </div>\n  );\n}\n\nexport default TextInput;\n","import React, { useContext, useState } from 'react';\nimport storeContext from '../context';\n\nconst completeColumns = [\n  '',\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water',\n];\n\nfunction arrayOfColumns(filters) {\n  if (filters.length > 0) {\n    const arrayOfUsedColumns = filters.map((filter) => filter.column);\n    const arrayOfColumnsToUse = completeColumns.filter(\n      (colum) => !arrayOfUsedColumns.includes(colum),\n    );\n    return arrayOfColumnsToUse;\n  }\n  return completeColumns;\n}\n\nfunction generateColumnOptions(filters) {\n  return arrayOfColumns(filters).map((each) => (\n    <option key={each} value={each}>\n      {each}\n    </option>\n  ));\n}\n\nfunction updateStore({\n  column, comparison, value, filters, setValue, setColumn, setValuesFilter,\n}) {\n  const numericValues = { column, comparison, value };\n  const newFilters = [...filters, { column, comparison, value }];\n  if (column === '' || comparison === '' || value === '') {\n    return null;\n  }\n  setValue('');\n  setColumn('');\n  return setValuesFilter({ numericValues, filters: newFilters });\n}\n\nfunction generateValuesInput(state) {\n  return (\n    <div>\n      <label htmlFor=\"column\">\n        <select onChange={(e) => state.setColumn(e.target.value)} data-testid=\"column\" id=\"column\">\n          {generateColumnOptions(state.filters)}\n        </select>\n      </label>\n      <select\n        onChange={(e) => state.setComparison(e.target.value)}\n        data-testid=\"comparison\"\n        id=\"comparison\"\n      >\n        <option value=\"bigger than\">bigger than</option>\n        <option value=\"less than\">less than</option>\n        <option value=\"equal to\">equal to</option>\n      </select>\n      <input\n        value={state.value}\n        onChange={(e) => state.setValue(e.target.value)}\n        data-testid=\"comparisonValue\"\n        id=\"comparisonValue\"\n        type=\"number\"\n        placeholder=\"Valor\"\n      />\n      <button type=\"button\" onClick={() => updateStore(state)}>\n        Adicionar filtro\n      </button>\n    </div>\n  );\n}\n\nfunction ValuesInput() {\n  const [column, setColumn] = useState('');\n  const [comparison, setComparison] = useState('bigger than');\n  const [value, setValue] = useState('');\n  const {\n    setValuesFilter,\n    valuesFilter: { filters },\n  } = useContext(storeContext);\n\n  const state = {\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    value,\n    setValue,\n    setValuesFilter,\n    filters,\n  };\n\n  if (filters.length === 5) {\n    return 'All filters are being used';\n  }\n  return (\n    <div>\n      Choose the column to filter:\n      <div>{generateValuesInput(state)}</div>\n    </div>\n  );\n}\n\nexport default ValuesInput;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect } from 'react';\nimport storeContext from '../context';\nimport './table.css';\n\nfunction arrayOfTags(data) {\n  return Object.entries(data[0])\n    .map((tag) => tag[0])\n    .filter((name) => name !== 'residents');\n}\n\nfunction generateTableBody(data, tags) {\n  return data.map((planet) => (\n    <tr key={planet.diameter}>\n      {tags.map((tag) => (\n        <td data-testid=\"tableTD\" key={tag}>{planet[tag]}</td>\n      ))}\n    </tr>\n  ));\n}\n\nfunction generateTable(data) {\n  if (data.length > 0) {\n    const tags = arrayOfTags(data);\n    return (\n      <table>\n        <thead>\n          <tr>\n            {tags.map((tag) => (\n              <th data-testid=\"tableTH\" key={`${tag}1`}>{tag}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>{generateTableBody(data, tags)}</tbody>\n      </table>\n    );\n  }\n  return <p>Planet not found</p>;\n}\n\nfunction Table() {\n  const { initialData, filteredData, starWarsAPI } = useContext(storeContext);\n\n  useEffect(() => {\n    starWarsAPI();\n  }, []);\n\n  if (initialData.isFetching) {\n    return <p>LOADING...</p>;\n  }\n  if (filteredData) {\n    return generateTable(filteredData);\n  }\n  return generateTable(initialData.data.results);\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport storeContext from '../context';\n\nfunction FiltersActive() {\n  const {\n    valuesFilter: { filters },\n    setValuesFilter,\n  } = useContext(storeContext);\n\n  function removeFilter(column) {\n    const newFilters = filters.filter((filter) => filter.column !== column);\n    return setValuesFilter({ filters: newFilters });\n  }\n\n  function showFilters() {\n    if (filters.length > 0) {\n      return filters.map((filter) => (\n        <div key={filter.column}>\n          <p>{`${filter.column} ${filter.comparison} ${filter.value}`}</p>\n          <button type=\"button\" onClick={() => removeFilter(filter.column)}>\n            X\n          </button>\n        </div>\n      ));\n    }\n    return 'No filter';\n  }\n\n  return (\n    <div>\n      <p>Filters active:</p>\n      <div>{showFilters()}</div>\n    </div>\n  );\n}\n\nexport default FiltersActive;\n","import React from 'react';\nimport './App.css';\nimport TextInput from './components/TextInput';\nimport ValuesInput from './components/ValuesInput';\nimport Table from './components/Table';\nimport FiltersActive from './components/FiltersActive';\n\nfunction App() {\n  return (\n    <div>\n      <FiltersActive />\n      <ValuesInput />\n      <TextInput />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Provider from './Provider';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}